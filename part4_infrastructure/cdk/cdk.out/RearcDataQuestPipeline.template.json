{
 "Description": "Rearc Data Quest - Complete Data Pipeline Infrastructure",
 "Resources": {
  "BLSDataBucketD3A30674": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "rearc-quest-bls-data",
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     },
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Owner",
      "Value": "Data-Engineering-Team"
     },
     {
      "Key": "Project",
      "Value": "Rearc-Data-Quest"
     }
    ],
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/BLSDataBucket/Resource"
   }
  },
  "BLSDataBucketPolicy20CBDD52": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "BLSDataBucketD3A30674"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "BLSDataBucketD3A30674",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "BLSDataBucketD3A30674",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/BLSDataBucket/Policy/Resource"
   }
  },
  "BLSDataBucketAutoDeleteObjectsCustomResourceD0E3908C": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "BLSDataBucketD3A30674"
    }
   },
   "DependsOn": [
    "BLSDataBucketPolicy20CBDD52"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/BLSDataBucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-us-east-2"
     },
     "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs22.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "BLSDataBucketD3A30674"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6",
    "aws:asset:property": "Code"
   }
  },
  "PopulationDataBucket5F2D4365": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "rearc-quest-population-data",
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     },
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Owner",
      "Value": "Data-Engineering-Team"
     },
     {
      "Key": "Project",
      "Value": "Rearc-Data-Quest"
     }
    ],
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/PopulationDataBucket/Resource"
   }
  },
  "PopulationDataBucketPolicyCBEE0BC0": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "PopulationDataBucket5F2D4365"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "PopulationDataBucket5F2D4365",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PopulationDataBucket5F2D4365",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/PopulationDataBucket/Policy/Resource"
   }
  },
  "PopulationDataBucketAutoDeleteObjectsCustomResourceE7EB093D": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "PopulationDataBucket5F2D4365"
    }
   },
   "DependsOn": [
    "PopulationDataBucketPolicyCBEE0BC0"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/PopulationDataBucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "PopulationDataBucketNotifications6E970306": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "PopulationDataBucket5F2D4365"
    },
    "NotificationConfiguration": {
     "QueueConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".json"
          }
         ]
        }
       },
       "QueueArn": {
        "Fn::GetAtt": [
         "AnalyticsQueue238D9515",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true,
    "SkipDestinationValidation": false
   },
   "DependsOn": [
    "AnalyticsQueuePolicy69C133EE",
    "AnalyticsQueue238D9515",
    "PopulationDataBucketPolicyCBEE0BC0"
   ],
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/PopulationDataBucket/Notifications/Resource"
   }
  },
  "AnalyticsDLQE9AD2DE0": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "MessageRetentionPeriod": 1209600,
    "QueueName": "rearc-quest-analytics-dlq",
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Owner",
      "Value": "Data-Engineering-Team"
     },
     {
      "Key": "Project",
      "Value": "Rearc-Data-Quest"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/AnalyticsDLQ/Resource"
   }
  },
  "AnalyticsQueue238D9515": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "QueueName": "rearc-quest-analytics-queue",
    "RedrivePolicy": {
     "deadLetterTargetArn": {
      "Fn::GetAtt": [
       "AnalyticsDLQE9AD2DE0",
       "Arn"
      ]
     },
     "maxReceiveCount": 3
    },
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Owner",
      "Value": "Data-Engineering-Team"
     },
     {
      "Key": "Project",
      "Value": "Rearc-Data-Quest"
     }
    ],
    "VisibilityTimeout": 360
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/AnalyticsQueue/Resource"
   }
  },
  "AnalyticsQueuePolicy69C133EE": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:SendMessage"
       ],
       "Condition": {
        "ArnLike": {
         "aws:SourceArn": {
          "Fn::GetAtt": [
           "PopulationDataBucket5F2D4365",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "s3.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "AnalyticsQueue238D9515",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "AnalyticsQueue238D9515"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/AnalyticsQueue/Policy/Resource"
   }
  },
  "DataProcessorRole3AF7AF75": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Owner",
      "Value": "Data-Engineering-Team"
     },
     {
      "Key": "Project",
      "Value": "Rearc-Data-Quest"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/DataProcessorRole/Resource"
   }
  },
  "DataProcessorRoleDefaultPolicy391E0388": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "BLSDataBucketD3A30674",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "PopulationDataBucket5F2D4365",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "BLSDataBucketD3A30674",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PopulationDataBucket5F2D4365",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "DataProcessorRoleDefaultPolicy391E0388",
    "Roles": [
     {
      "Ref": "DataProcessorRole3AF7AF75"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/DataProcessorRole/DefaultPolicy/Resource"
   }
  },
  "AnalyticsProcessorRole70659AC1": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Owner",
      "Value": "Data-Engineering-Team"
     },
     {
      "Key": "Project",
      "Value": "Rearc-Data-Quest"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/AnalyticsProcessorRole/Resource"
   }
  },
  "AnalyticsProcessorRoleDefaultPolicy8F943ADA": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "BLSDataBucketD3A30674",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "PopulationDataBucket5F2D4365",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "BLSDataBucketD3A30674",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "PopulationDataBucket5F2D4365",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "sqs:ChangeMessageVisibility",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:ReceiveMessage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "AnalyticsQueue238D9515",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "AnalyticsProcessorRoleDefaultPolicy8F943ADA",
    "Roles": [
     {
      "Ref": "AnalyticsProcessorRole70659AC1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/AnalyticsProcessorRole/DefaultPolicy/Resource"
   }
  },
  "DataProcessorFunctionAD472B9A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-us-east-2"
     },
     "S3Key": "ce5bd1718d0a40e3d93e6027c92cf11b241e9bae3f624147437b1ccce2ad7ff3.zip"
    },
    "Environment": {
     "Variables": {
      "BLS_BUCKET_NAME": {
       "Ref": "BLSDataBucketD3A30674"
      },
      "POPULATION_BUCKET_NAME": {
       "Ref": "PopulationDataBucket5F2D4365"
      },
      "ANALYTICS_QUEUE_URL": {
       "Ref": "AnalyticsQueue238D9515"
      }
     }
    },
    "FunctionName": "rearc-quest-data-processor",
    "Handler": "data_processor.lambda_handler",
    "MemorySize": 512,
    "Role": {
     "Fn::GetAtt": [
      "DataProcessorRole3AF7AF75",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Owner",
      "Value": "Data-Engineering-Team"
     },
     {
      "Key": "Project",
      "Value": "Rearc-Data-Quest"
     }
    ],
    "Timeout": 900
   },
   "DependsOn": [
    "DataProcessorRoleDefaultPolicy391E0388",
    "DataProcessorRole3AF7AF75"
   ],
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/DataProcessorFunction/Resource",
    "aws:asset:path": "asset.ce5bd1718d0a40e3d93e6027c92cf11b241e9bae3f624147437b1ccce2ad7ff3.zip",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "DataProcessorFunctionAllowEventBridgeInvokeB187FEEF": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "DataProcessorFunctionAD472B9A",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "DailyDataProcessingScheduleA1C6C09E",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/DataProcessorFunction/AllowEventBridgeInvoke"
   }
  },
  "AnalyticsProcessorFunctionF4B01001": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-us-east-2"
     },
     "S3Key": "15611538a152ea1655393a5184fa470249565af3be86aee6a66be11313f513d9.zip"
    },
    "Environment": {
     "Variables": {
      "BLS_BUCKET_NAME": {
       "Ref": "BLSDataBucketD3A30674"
      },
      "POPULATION_BUCKET_NAME": {
       "Ref": "PopulationDataBucket5F2D4365"
      }
     }
    },
    "FunctionName": "rearc-quest-analytics-processor",
    "Handler": "analytics_processor.lambda_handler",
    "MemorySize": 1024,
    "Role": {
     "Fn::GetAtt": [
      "AnalyticsProcessorRole70659AC1",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Owner",
      "Value": "Data-Engineering-Team"
     },
     {
      "Key": "Project",
      "Value": "Rearc-Data-Quest"
     }
    ],
    "Timeout": 300
   },
   "DependsOn": [
    "AnalyticsProcessorRoleDefaultPolicy8F943ADA",
    "AnalyticsProcessorRole70659AC1"
   ],
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/AnalyticsProcessorFunction/Resource",
    "aws:asset:path": "asset.15611538a152ea1655393a5184fa470249565af3be86aee6a66be11313f513d9",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "AnalyticsProcessorFunctionSqsEventSourceRearcDataQuestPipelineAnalyticsQueue74DFC6333EED4062": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "BatchSize": 1,
    "EventSourceArn": {
     "Fn::GetAtt": [
      "AnalyticsQueue238D9515",
      "Arn"
     ]
    },
    "FunctionName": {
     "Ref": "AnalyticsProcessorFunctionF4B01001"
    },
    "MaximumBatchingWindowInSeconds": 5,
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Owner",
      "Value": "Data-Engineering-Team"
     },
     {
      "Key": "Project",
      "Value": "Rearc-Data-Quest"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/AnalyticsProcessorFunction/SqsEventSource:RearcDataQuestPipelineAnalyticsQueue74DFC633/Resource"
   }
  },
  "DailyDataProcessingScheduleA1C6C09E": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Daily trigger for BLS and Population data processing",
    "Name": "rearc-quest-daily-schedule",
    "ScheduleExpression": "cron(0 6 * * ? *)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "DataProcessorFunctionAD472B9A",
        "Arn"
       ]
      },
      "Id": "Target0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/DailyDataProcessingSchedule/Resource"
   }
  },
  "DailyDataProcessingScheduleAllowEventRuleRearcDataQuestPipelineDataProcessorFunction8E8BCE940985D425": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "DataProcessorFunctionAD472B9A",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "DailyDataProcessingScheduleA1C6C09E",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/DailyDataProcessingSchedule/AllowEventRuleRearcDataQuestPipelineDataProcessorFunction8E8BCE94"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Owner",
      "Value": "Data-Engineering-Team"
     },
     {
      "Key": "Project",
      "Value": "Rearc-Data-Quest"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def get_id(n):\n    n['Id'] = ''\n    sorted_notifications = sort_filter_rules(n)\n    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('\"Name\": \"prefix\"', '\"Name\": \"Prefix\"').replace('\"Name\": \"suffix\"', '\"Name\": \"Suffix\"')\n    return f\"{stack_id}-{hash(strToHash)}\"\n  def with_id(n):\n    n['Id'] = get_id(n)\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        old_incoming_ids = [get_id(n) for n in old.get(t, [])]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      \n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n\ndef sort_filter_rules(json_obj):\n  if not isinstance(json_obj, dict):\n      return json_obj\n  for key, value in json_obj.items():\n      if isinstance(value, dict):\n          json_obj[key] = sort_filter_rules(value)\n      elif isinstance(value, list):\n          json_obj[key] = [sort_filter_rules(item) for item in value]\n  if \"Filter\" in json_obj and \"Key\" in json_obj[\"Filter\"] and \"FilterRules\" in json_obj[\"Filter\"][\"Key\"]:\n      filter_rules = json_obj[\"Filter\"][\"Key\"][\"FilterRules\"]\n      sorted_filter_rules = sorted(filter_rules, key=lambda x: x[\"Name\"])\n      json_obj[\"Filter\"][\"Key\"][\"FilterRules\"] = sorted_filter_rules\n  return json_obj"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300,
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Owner",
      "Value": "Data-Engineering-Team"
     },
     {
      "Key": "Project",
      "Value": "Rearc-Data-Quest"
     }
    ]
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/2VQQU7DMBB8S+/OUpoLV1rBDRGSB1SusxST2A5Zb6vK8t+RnUCCuHhmdmZWK+9gt32A7UZeqVBtV/T6BKHxUnVCXukYqISwZ9WhF4d3O7MJKtdrdVvGs57EXhJGQV8E4Y2RMcUmkt+lu5JRaGkg1K7P8YxL8CfTS3NqJYRntsprZ5O35hWORhMl9XRB6xvHo8IXOQzanlPg/zQKKo+SCD3BYwKBKUMQap5v4R5jFAcm70yNlNvZ+OV/rGp0F93imL5B5JWNl+d0wLr8yn5gH0V18x/O3pVwX0K5+SSti5Gt1wahnvAbOq9sTKcBAAA="
   },
   "Metadata": {
    "aws:cdk:path": "RearcDataQuestPipeline/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "BLSBucketName": {
   "Description": "BLS data S3 bucket name",
   "Value": {
    "Ref": "BLSDataBucketD3A30674"
   }
  },
  "PopulationBucketName": {
   "Description": "Population data S3 bucket name",
   "Value": {
    "Ref": "PopulationDataBucket5F2D4365"
   }
  },
  "AnalyticsQueueUrl": {
   "Description": "Analytics SQS queue URL",
   "Value": {
    "Ref": "AnalyticsQueue238D9515"
   }
  },
  "DataProcessorLambdaArn": {
   "Description": "Data processor Lambda function ARN",
   "Value": {
    "Fn::GetAtt": [
     "DataProcessorFunctionAD472B9A",
     "Arn"
    ]
   }
  },
  "AnalyticsProcessorLambdaArn": {
   "Description": "Analytics processor Lambda function ARN",
   "Value": {
    "Fn::GetAtt": [
     "AnalyticsProcessorFunctionF4B01001",
     "Arn"
    ]
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}